pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials') // Jenkins credentials for Docker Hub
        IMAGE_NAME = 'linusbwana/jenkins-messaging-app' // Docker Hub repo name
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', credentialsId: 'github-credentials', url: 'https://github.com/LinusBwana/alx-backend-python.git'
            }
        }

        stage('Set Up Python Environment') {
            steps {
                dir('messaging_app/messaging_app') {
                    sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip3 install --upgrade pip
                        pip3 install -r messaging_app/requirements.txt
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('messaging_app/messaging_app') {
                    sh '''
                        . venv/bin/activate
                        pytest --maxfail=1 --disable-warnings -q --junitxml=test-results.xml || echo "No tests found, skipping..."
                    '''
                }
            }
        }

        stage('Publish Test Report') {
            steps {
                dir('messaging_app/messaging_app') {
                    script {
                        if (fileExists('test-results.xml')) {
                            junit 'test-results.xml'
                        } else {
                            echo 'No test-results.xml file found â€” skipping report.'
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('messaging_app/messaging_app') {
                    script {
                        sh """
                            docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} .
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                dir('messaging_app/messaging_app') {
                    script {
                        sh """
                            echo "${DOCKERHUB_CREDENTIALS_PSW}" | docker login -u "${DOCKERHUB_CREDENTIALS_USR}" --password-stdin
                            docker push ${IMAGE_NAME}:${BUILD_NUMBER}
                            docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${IMAGE_NAME}:latest
                            docker push ${IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            deleteDir()
        }
    }
}